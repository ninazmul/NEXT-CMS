generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[] @relation("StoreBillboards")
  categories Category[]  @relation("StoreCategories")
  sizes      Size[]      @relation("StoreSizes")
  colors     Color[]     @relation("StoreColors")
  products   Product[]   @relation("StoreProducts")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreBillboards", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]  @relation("BillboardCategories")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation("StoreCategories", fields: [storeId], references: [id])
  billboardId String      @db.ObjectId
  billboard   Billboard   @relation("BillboardCategories", fields: [billboardId], references: [id])
  products    Product[]   @relation("CategoryProducts")
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreSizes", fields: [storeId], references: [id])
  name       String
  value      String
  products   Product[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreColors", fields: [storeId], references: [id])
  name       String
  value      String
  products   Product[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreProducts", fields: [storeId], references: [id])
  categoryId String      @db.ObjectId
  category   Category    @relation("CategoryProducts", fields: [categoryId], references: [id])
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String      @db.ObjectId
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String      @db.ObjectId
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  productId  String      @db.ObjectId
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([productId])
}
